#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

/*
 * Complete the 'formingMagicSquare' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts 2D_INTEGER_ARRAY s as parameter.
 */

int formingMagicSquare(vector<vector<int>> s) {
    int n=3;
    //vector<vector<int>> a(n);
    int magic_const=(n*((n*n)+1))/2;
    int a[n][n];
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
           a[i][j]=0;
           //cout<<a[i][j];
        }
    }
    //forming a magic square
    //index for 1
    int i=n/2;
    int j=n-1;
    a[i][j]=1;
    for(int num=2;num<=n*n;num++){ //index for 2 and ownwards
        i--;
        j++;
        if(i==-1){ //if i = -1 round to n-1
            i=n-1;
        }
        else if(j==n){ //if j = n, round to 0
            j=0;
        }
        
        if(a[i][j]!=0){ //if there's already a number present, decrement j by 2, increment i         by 1
            i=i+1;
            j=j-2;
            num--;
        }
        else{
            a[i][j]=num;
        }
    }
    //create all possible combinations/mirror images of this matrix
    int b[8][9];
    int mirror_a[n][n];
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            mirror_a[i][j]=a[i][j];
        }
    }
    //create mirror
    for(int i=0;i<n;i++){ //mirror matrix for 3x3       
        swap(mirror_a[i][n-1],mirror_a[i][n-1]); //00-02 10-12 20-22       
    }
    //combinations
    return 0;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    vector<vector<int>> s(3);

    for (int i = 0; i < 3; i++) {
        s[i].resize(3);

        string s_row_temp_temp;
        getline(cin, s_row_temp_temp);

        vector<string> s_row_temp = split(rtrim(s_row_temp_temp));

        for (int j = 0; j < 3; j++) {
            int s_row_item = stoi(s_row_temp[j]);

            s[i][j] = s_row_item;
        }
    }

    int result = formingMagicSquare(s);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
